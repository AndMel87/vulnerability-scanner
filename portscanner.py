#portscanner 2021, modified for use with vulnerabilityscanner.py

# --- Libraries ---
import socket
from IPy import IP

#scan function (converted from function to class
class portScan():
    banners = []
    openPorts = []

    def __init__(self, target, portNumber):
        self.target = target
        self.portNumber = portNumber


    # scan ports in range
    def scan(self):
        for port in range(1, 1025):
            self.scanPort(port)


    #Function to convert to IP-format. Function "IP" takes parametre "ip". If IP is correct, return the IP. If not, try to resolve IP by hostname input "ip"
    def checkIP(self):
        try:
            IP(self.target)
            return(self.target)
        except ValueError:
            return socket.gethostbyname(self.target)


    #Establish connection with target machine
    #try and except rule
    def scanPort(self,port):
        try:
            convertedIP = self.checkIP()
            sock = socket.socket()
            #set timeout, half a second. Less accurate, but faster
            sock.settimeout(0.5)
            sock.connect((convertedIP, port))
            self.openPorts.append(port)
            try:
                #decode and strip port banner. Strip in order to match with vuln.file
                banner = sock.recv(1024).decode().strip("\n").strip("\r")
                self.banners.append(banner)
            except:
                self.banners.append(" ")
            sock.close()
        except:
            pass

